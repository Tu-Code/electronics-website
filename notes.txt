https://www.stears.co/article/circular-economy-tackling-electronic-waste-in-nigeria/
work with Netherlands

partners: https://hinckley.com.ng/collect-and-recycle-service/, https://www.thegef.org/, https://sogoewaste.com/category/e-waste/

const express = require('express');
const router = express.Router();
const AgencyService = require('./AgencyService'); // Adjust the path based on your file structure

// POST endpoint for agency creation and file uploads
router.post('/createAgency', upload.fields([{ name: 'logoUpload', maxCount: 1 }, { name: 'certificationUpload', maxCount: 5 }]), async (req, res) => {
    try {
        const formData = req.body;
        const logoFile = req.files['logoUpload'][0]; // Assuming only one logo file
        const certificateFiles = req.files['certificationUpload']; // Array of certificate files

        // Create agency and save uploaded file paths
        await AgencyService.createAgency(formData, logoFile, certificateFiles);

        res.status(200).send('Agency created successfully');
    } catch (error) {
        console.error(error);
        res.status(500).send('Error creating agency');
    }
});

module.exports = router;


const bcrypt = require('bcrypt');
const saltRounds = 10;
const Agency = require('./AgencyModel'); // Adjust the path based on your file structure

class AgencyService {
    static async createAgency(formData, logoFile, certificateFiles) {
        try {
            const {
                agencyName,
                agencyEmail,
                agencyWebsite,
                agencyPhone,
                state,
                agencyArea,
                password,
                agencySpeciality,
                agencyIntroduction,
                agencyPartnerships,
                agencyInformation,
            } = formData;

            const hashedPassword = await bcrypt.hash(password, saltRounds);

            // Process uploaded files and get file paths
            const { logoPath, certificatePaths } = await this.saveUploadedFiles(logoFile, certificateFiles);

            const newAgency = new Agency({
                agencyName,
                agencyEmail,
                agencyWebsite,
                agencyPhone,
                agencyState: state,
                agencyArea,
                password: hashedPassword,
                agencySpecialty: agencySpeciality,
                agencyIntroduction,
                agencyPartnerships,
                additionalInformation: agencyInformation,
                agencyLogo: logoPath,
                agencyCertificate: certificatePaths,
            });

            await newAgency.save();
        } catch (error) {
            throw new Error('Error creating agency');
        }
    }

    static async saveUploadedFiles(logoFile, certificateFiles) {
        try {
            const logoPath = '/uploads/' + logoFile.filename;

            const certificatePaths = certificateFiles.map(file => '/uploads/' + file.filename);

            return {
                logoPath: logoPath,
                certificatePaths: certificatePaths,
            };
        } catch (error) {
            throw new Error('Error saving uploaded files.');
        }
    }
}

module.exports = AgencyService;
